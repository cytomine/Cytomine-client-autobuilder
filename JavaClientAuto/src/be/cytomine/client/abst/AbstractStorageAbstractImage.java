
package be.cytomine.client.abst;

import be.cytomine.client.*;
import java.util.*;
import org.json.simple.*;

import java.util.Date;
import be.cytomine.client.Server;
import org.json.simple.JSONObject;


/**
 * A link between a storage and some images
 * 
 * @author ClientBuilder (Loïc Rollus)
 * @version 0.1
 * 
 * DO NOT EDIT THIS FILE. THIS IS CODE IS BUILD AUTOMATICALY. ALL CHANGE WILL BE LOST AFTER NEXT GENERATION.
 * 
 * IF YOU WANT TO EDIT A DOMAIN FILE (change method, add property,...), JUST EDIT THE CHILD FILE “YourDomain.java” instead of this file “AbstractYourDomain.java”. I WON'T BE CLEAR IF IT ALREADY EXIST.
 * 
 */
public abstract class AbstractStorageAbstractImage
    extends AbstractDomain
{

    /**
     * The full class name of the domain
     * 
     */
    protected String clazz;
    /**
     * The domain id
     * 
     */
    protected Long id;
    /**
     * The date of the domain creation
     * 
     */
    protected Date created;
    /**
     * The date of the domain modification
     * 
     */
    protected Date updated;
    /**
     * When domain was removed from Cytomine
     * 
     */
    protected Date deleted;
    /**
     * The storage id
     * 
     */
    protected Long storage;
    /**
     * The abstractimage id
     * 
     */
    protected Long abstractimage;

    /**
     * 
     * @return
     *     The full class name of the domain
     */
    public String getClazz()
        throws Exception
    {
        return clazz;
    }

    /**
     * 
     * @return
     *     The domain id
     */
    public Long getId()
        throws Exception
    {
        return id;
    }

    /**
     * 
     * @return
     *     The date of the domain creation
     */
    public Date getCreated()
        throws Exception
    {
        return created;
    }

    /**
     * 
     * @return
     *     The date of the domain modification
     */
    public Date getUpdated()
        throws Exception
    {
        return updated;
    }

    /**
     * 
     * @return
     *     When domain was removed from Cytomine
     */
    public Date getDeleted()
        throws Exception
    {
        return deleted;
    }

    /**
     * 
     * @return
     *     The storage id
     */
    public Long getStorage()
        throws Exception
    {
        return storage;
    }

    /**
     * 
     * @param storage
     *     The storage id
     */
    public void setStorage(Long storage)
        throws Exception
    {
        this.storage = storage;
    }

    /**
     * 
     * @return
     *     The abstractimage id
     */
    public Long getAbstractimage()
        throws Exception
    {
        return abstractimage;
    }

    /**
     * 
     * @param abstractimage
     *     The abstractimage id
     */
    public void setAbstractimage(Long abstractimage)
        throws Exception
    {
        this.abstractimage = abstractimage;
    }

    public void build(Long storage, Long abstractimage)
        throws Exception
    {
        
		this.storage=storage;
		this.abstractimage=abstractimage;

    
    }

    public void build(JSONObject json)
        throws Exception
    {
        
		this.clazz =JSONUtils.extractJSONString(json.get("class"));
		this.id =JSONUtils.extractJSONLong(json.get("id"));
		this.created =JSONUtils.extractJSONDate(json.get("created"));
		this.updated =JSONUtils.extractJSONDate(json.get("updated"));
		this.deleted =JSONUtils.extractJSONDate(json.get("deleted"));
		this.storage =JSONUtils.extractJSONLong(json.get("storage"));
		this.abstractimage =JSONUtils.extractJSONLong(json.get("abstractimage"));

    
    }

    public JSONObject toJSON()
        throws Exception
    {
        
		JSONObject json=new JSONObject();
		json.put("class",JSONUtils.formatJSON(this.clazz));
		json.put("id",JSONUtils.formatJSON(this.id));
		json.put("created",JSONUtils.formatJSON(this.created));
		json.put("updated",JSONUtils.formatJSON(this.updated));
		json.put("deleted",JSONUtils.formatJSON(this.deleted));
		json.put("storage",JSONUtils.formatJSON(this.storage));
		json.put("abstractimage",JSONUtils.formatJSON(this.abstractimage));

		return json;
    
    }

    public void add(Server server)
        throws Exception
    {
        
		String path = "/api/storage_abstract_image.json?";

		JSONObject json = server.doPOST(path,this.toJSON());

		this.build((JSONObject)json.get("storageabstractimage"));

    
    }

    public void delete(Server server)
        throws Exception
    {
        
		String path = "/api/storage_abstract_image/{id}.json?";
		path = path.replace("{id}",getId()+"");

		server.doDELETE(path);
		build(new JSONObject());

    
    }

}
