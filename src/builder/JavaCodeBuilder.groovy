package builder

import builder.template.AbstractClassTemplate
import builder.template.CodeTemplate
import builder.template.CommentClassTemplate
import builder.template.FieldTemplate
import builder.template.MethodTemplate
import builder.template.ParameterTemplate
import builder.template.SubClassTemplate
import builder.template.TypeTemplate
import com.sun.codemodel.JBlock
import com.sun.codemodel.JCodeModel
import com.sun.codemodel.JDefinedClass
import com.sun.codemodel.JExpr
import com.sun.codemodel.JMethod
import com.sun.codemodel.JMod
import com.sun.codemodel.JPackage
import org.json.simple.JSONObject

/**
 * Created by lrollus on 3/26/14.
 */
class JavaCodeBuilder {

    String outputDir

    JCodeModel codeModel = new JCodeModel();


    def addAbstClass(AbstractClassTemplate classTemplate,def parentClass) {

        JPackage jp = codeModel._package(classTemplate.fullPackage);

        JDefinedClass classModel = jp._class(JMod.ABSTRACT+ JMod.PUBLIC,classTemplate.name);
        if(parentClass) {
            classModel._extends(parentClass)
        }

        addAbstractClassComment(classTemplate.comment,classModel)

        return classModel
    }

    def addSubClass(SubClassTemplate classTemplate, def parentClass) {

        JPackage jp = codeModel._package(classTemplate.fullPackage);

        JDefinedClass classModel = jp._class(JMod.PUBLIC,classTemplate.name);
        classModel._extends(parentClass)

        addSubClassComment(classTemplate.comment,classModel)

        return classModel
    }

    def fillClass(def classTemplate, JDefinedClass classModel) {

        classTemplate.fields.each { field ->
            addField(field,classModel)
        }

        classTemplate.methods.each {method ->
            addMethod(method,classModel)
        }
        classModel
    }







    def addField(FieldTemplate field, def classModel) {
        def fieldModel = classModel.field(JMod.PROTECTED,convertTypeToJavaType(field.type),field.name)

        fieldModel.javadoc().add(field.comment.description)

        if(field.useInGetter) {
            def method = addMethod(MethodTemplate.build(getGetterName(field.name),[],[],[],field.type,null,true,false),classModel)
            method.javadoc().addReturn().add(field.comment.description)
            buildGetterCode(method.body(),fieldModel)
        }

        if(field.useInSetter) {
            def method = addMethod(MethodTemplate.build(getSetterName(field.name),[ParameterTemplate.build(field.name,field.type)],[],[],TypeTemplate.build("Void"),null,true,false),classModel)

            method.javadoc().addParam(field.name).add(field.comment.description)
            buildSetterCode(method.body(),fieldModel,method.params().first())
        }

        fieldModel
    }

    def addMethod(MethodTemplate methodTemplate, def classModel) {

        def mods= JMod.PRIVATE

        if(methodTemplate.isPublic) {
            mods = JMod.PUBLIC
        }
        if(!methodTemplate.isPublic) {
            mods = JMod.PROTECTED
        }

        if(methodTemplate.isStatic) {
            mods = mods + JMod.STATIC
        }

        if(methodTemplate.isAbstract) {
            mods = mods + JMod.ABSTRACT
        }

        println "add method = " + convertTypeToJavaType(methodTemplate.type) + " " + formatName(methodTemplate.name)

        JMethod method = classModel.method(mods,convertTypeToJavaType(methodTemplate.type),formatName(methodTemplate.name))

        methodTemplate.getAllParameters().each { parameterTemplate ->
            addParameter(ParameterTemplate.build(parameterTemplate.name,parameterTemplate.type),method)
        }

        method._throws(Exception.class)

        /* Adding method body */
        addCode(methodTemplate.code,method)


        method
    }

    def addCode(CodeTemplate codeTemplate, def methodModel) {
        if(!codeTemplate) return
        JBlock jBlock = methodModel.body();
        assert codeTemplate.code.containsKey("JAVA")
        jBlock.directStatement(codeTemplate.code.get("JAVA"))
    }

    def addParameter(ParameterTemplate parameterTemplate, def methodModel) {
        methodModel.param(convertTypeToJavaType(parameterTemplate.type),formatName(parameterTemplate.name))
    }

    static String formatName(String name) {
        def map =[" ", ":","(",")","-"]
        map.each {
            name = name.replace(it,"_")
        }
        return name
    }

    def addAbstractClassComment(CommentClassTemplate commentClassTemplate, def classModel) {

        classModel.javadoc().add(commentClassTemplate.description + "\n");
        classModel.javadoc().add("\n@author " + commentClassTemplate.author);
        classModel.javadoc().add("\n@version "+ commentClassTemplate.version);

        classModel.javadoc().add("\n\nDO NOT EDIT THIS FILE. THIS IS CODE IS BUILD AUTOMATICALY. ALL CHANGE WILL BE LOST AFTER NEXT GENERATION.")
        classModel.javadoc().add("\n\nIF YOU WANT TO EDIT A DOMAIN FILE (change method, add property,...), JUST EDIT THE CHILD FILE “YourDomain.java” instead of this file “AbstractYourDomain.java”. I WON'T BE CLEAR IF IT ALREADY EXIST.")
    }

    def addSubClassComment(CommentClassTemplate commentClassTemplate, def classModel) {

        classModel.javadoc().add(commentClassTemplate.description + "\n");
        classModel.javadoc().add("\n@author " + commentClassTemplate.author);
        classModel.javadoc().add("\n@version "+ commentClassTemplate.version);

        classModel.javadoc().add("\n\nYOU CAN EDIT THIS FILE (DO NO EDIT THE ABSTRACT PARENT CLASS)")
    }

    def writeAll() {
        codeModel.build(new File(outputDir));
    }

    def convertTypeToJavaType(TypeTemplate type) {
        def map = [
                "String" : String.class,
                "Integer" : Integer.class,
                "Long" : Long.class,
                "Date" : Date.class,
                "Object" : Object.class,
                "Boolean" : Boolean.class,
                "List" : List.class,
                "Void" : Void.TYPE,
                "Double" : Double.class,
                "Map" : Map.class,
                "JSONObject": JSONObject.class
        ]

        def javaType = map.get(type.type)

        if(javaType) {
            return javaType
        } else {
            JDefinedClass domain = codeModel._getClass("be.cytomine.client." + type.type)
            if(!domain) {
                //throw new Exception("Type ${type.type} cannot be convert to a Java Type!")
                return Object.class
            } else {
                return domain
            }

        }

    }

    static String getGetterName(String name) {
        def firstChar = name.substring(0, 1).toUpperCase();
        return "get" + firstChar + name.substring(1)
    }


    static String getSetterName(String name) {
        def firstChar = name.substring(0, 1).toUpperCase();
        return "set"+firstChar + name.substring(1)
    }

    def buildGetterCode(def blockModel, def fieldModel) {
        blockModel._return(fieldModel);
    }

    def buildSetterCode(def blockModel, def fieldObjectModel,def fieldMethodModel) {
        blockModel.assign(JExpr._this().ref(fieldObjectModel), fieldMethodModel);

    }


}



